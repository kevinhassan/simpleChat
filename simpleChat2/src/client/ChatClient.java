// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;   String id;    //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port,String id, ChatIF clientUI)     throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    this.id = id;    openConnection();    sendToServer("#login "+ id);  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {	try    {		if (isConnected()){			sendToServer(message); //Changer cette partie		}		String[] msg = message.split(" ");		switch(msg[0]){		case "#quit":			//notifier le serveur puis faire appel Ã  closeConnection			quit();			break;		case "#logoff":			closeConnection();			break;		case "#sethost":			if (!isConnected()){				String host = msg[1];				setHost(host);			}			break;		case "#setport":			if (!isConnected()){				String port = msg[1];				setPort(Integer.parseInt(port));			}			break;		case "#login":			if (!isConnected()){				openConnection();				if(msg.length>1){					sendToServer(message);				}			}			break;		case "#gethost":			System.out.println(getHost());			break;		case "#getport":			System.out.println(getPort());			break;		}          }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }    /**   * This method terminates the client.   */  public void quit()  {    try    {      closeConnection();    }    catch(IOException e) {}    System.exit(0);  }    public void connectionClosed(){	 clientUI.display("Connection closed");  }    public void connectionException(Exception exception){	  clientUI.display(exception.getMessage());  }}//End of ChatClient class