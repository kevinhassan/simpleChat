// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  private ChatIF clientUI;   private String id;    //Constructors ****************************************************/**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port,String id, ChatIF clientUI)     throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    this.id = id;  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {	  String[] message = msg.toString().split(">");	  System.out.println(message[1].equals("#close"));	  if(message[1].equals("#close")){			clientUI.display("Server disconnected nicely");			try {				clientUI.display("Non");				closeConnection();			} catch (IOException e) {				clientUI.display("PUTAIN");				e.printStackTrace();			}	  }else {		  	clientUI.display("ICI");			clientUI.display(msg.toString());		}  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {	try    {		String[] msg = message.split(" ");		// Vérifie que le premier caractère commence par un #		if (msg[0].startsWith("#")) {			switch(msg[0]){			case "#quit":				//notifier le serveur puis faire appel Ã  closeConnection				if (isConnected()){					try				    {						sendToServer(message);						closeConnection();				    }				    catch(IOException e) {}				}				quit();				break;			case "#logoff":				if (isConnected()){					sendToServer(message);					closeConnection();				}				else{					clientUI.display("You are not connected to any server !");				}				break;			case "#sethost":				if (!isConnected()){					String host = msg[1];					setHost(host);				}				break;			case "#setport":				if (!isConnected()){					String port = msg[1];					setPort(Integer.parseInt(port));				}				break;			case "#login":				if (!isConnected()){				    openConnection();					if(msg.length>1){						setId(msg[1]);						sendToServer(message);					}else{						sendToServer("#login "+ getId());					}				}				break;			case "#gethost":				if (!isConnected()){					clientUI.display(getHost());				}				break;			case "#getport":				if (!isConnected()){					clientUI.display(Integer.toString(getPort()));				}				break;			}      		} else {			// Si le message ne commence pas par un # 			if (isConnected()){				sendToServer(message);			}		}    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }    /**   * This method terminates the client.   */  public void quit()  {    System.exit(0);  }    protected void connectionEstablished(){		clientUI.display("Connection established !");	}    public void connectionClosed(){	 clientUI.display("Connection closed");  }    public void connectionException(Exception exception){	  clientUI.display(exception.getMessage());  }    public String getId() {	return id;  }  public void setId(String id) {	this.id = id;  }}//End of ChatClient class